-release of .net and c#:2002
-linear(sequntial)programming--->code written withn the same function,maintanence is hard
-structural(prosedural)programming->devide code into multible functions--->c language appeared
-oop--->appeared with c++ ,but first langage based on oop is "small type",-->Data,methods
-c--->c++--->c#
-native code=machine language-->.exe,.dll
-cpp--compiler-->.exe-->result =native code(in the assemply file-->.exe/.dll file)
-os manage hardware to run or excute the native code
-OS+Hardware--->platform
-native code is platform dependant-->code can run the platform(windows,mac..)that you compile
 it on , not portable,not cross platform-->solution:you can recompile the code in the new 
 platform,but there is diffrences between platforms in supporting code,features,and languages
 and then you need many versions of the same code.
 
-problems before c# and .NET:
 1-cross platform:use the same program in diffrent platforms
 2-cross language:use classes or controllers from language x in language y
 3-no cabability to create web app ,only windows apps

 -.net:
 logically is a big umberlla of technologies used to create apps.
 phiscally is a file installed in a machine to run apps on.

 -.net languages:
 1-visual basic:it isn't the old visual basic but only the same name,the same as c# in .net
 2-c#:automatic handling runtime and memory management,handling problems of cross platform
   and cross languages,pure oop language :all is a member and no global variables.
 *any feature appear in the 2 languages at the same time.
 3-visual c++ .net-->not pure oop,there are glopal members,build native code not IL
 4-J#:discontinued-->ãÈÞÊÔ ãæÌæÏå
 5-f#:function programming language
 
-how c# solved the problem of cross platform??
 program.cs(c# program)--->compiler(csc.exe)--->program.exe/.dll , the diffrence here 
 is in the .exe/.dll file (assemplly program) produced by compiler,the output isn't a 
 native code but managed code,CIL(common intermidiate language),IL(intermidiate language),or 
 MSIL(microsoft intermidiate language),this code doesn't depend on platform or human 
 language the code written using it,completly portable,nutral,and independant.
 but the os can't undersatand this IL file so you you need extra layer CLR.
 ~assemplly file contains IL+meta data(discription for data tybes).
 *CLR:common language runtime,tiny os layer over os ,manages and excutes .net apps beacause 
  it contains JIT(just in time compiler) compiler,why we need all of this???????
 -in fact the file produced by c# compiler isn't completly compiled so we need to continue compilation,
  this meaning the compilation operation is devided into 2 steps.
 -IL code-->JIT-->native code run in the current plat form
*problems with this solution:
 -this code is temporary(installed in RAM),so once we end the program end the native code 
  removed but the IL code is still stored in hard disk.
 -evrey platform needs its own .net framework(JIT)!!!
 -overhead at runtime due to Jitting but it isn't a big problem as:æÞÊ ãÞÇÑäÉ ÈÇáäÇÊíÝ
   =Jitting run using function call,so you only run needed function not all.
   =Jit compiler is very fast
   =Jitting happen only for first call as long as the programing not terminated
   íÚäí ÇäÇ áãÇ ÈäÇÏí ÇáÝÇäßÔä áÇæá ãÑÉ ÈíÑæÍ íÚãáåÇ Jitting 
   æíÎÒä ÇáäÇÊíÝ ßæ ÈÊÇÚåÇ Ýí ÇáÑÇã æ áãÇ íÍÊÇÌåÇ ÊÇäí ÈíÌíÈåÇ ãä ÇáÑÇã ØÇáãÇ ÇáÈÑäÇãÌ ãÝÊæÍ
 -easier to be attacked-->as attackers can decombile IL code and read it and also IL code is more readable than native code
  =.net reflector--->convert IL to c#,or VB,or any .net language(reverse engineer IL code)
  =ILspy-->you can veiw IL,reverse IL into c#.
  =solution:security by of security technique-->not easy to understand it,make the clean IL code in another form more 
   difficult to be understood,don't give clean IL to user but IL code produced by security by of security using
   some tools called obufasectors tools.    clean IL-->obufasectors--->obufascated IL.ÇæÝíÓßÇÊæÑÒ
   make code not clean and then give it user
  =ãÔ ãÔßáå ßÈíÑÉ ÈÇáäÓÈå ááæíÈ áÇä ÇáíæÒ ãÔ ãÚÇå ÇßÓÓ Úáí ÇáÈÇß ÇäÏ

-what if you want only some parts of your program to be native not IL?
 yes,you can write unsafe(as native code is unsafe,but IL is safe)
 in this parts ,add some configurations ,you can know details next time,we also have native .net that build 
 directly native code.

-IS all this make .net framework a cross platform?????!!
 until 2014-->actually no because of the problems were among microsoft unix,mac..
-IS that means no cross platform exist until 2014??
 No,there were mono framework,mono project
 =mono project:open source frome work appeared within .net
 =parllel implementation for .net framework-->ÈíÔæÝ ÚäÏåã Çíå Ý ÏæÊ äÊ æ íÚãá Òíå
 =not official ãÔ ÊÈÚ ãÇíßÑæÓæÝÊ
 =åæ ÈíÞáÏ Çí ÍÇÌå ÈÊÙåÑ ãä ÏæÊ äÊ
 =know called xamarine
 =ÈíßÊÈ C# ÚÇÏí

-.net core:
 =released-->2016
 =actual cross platform
 =fully open source
 =component based-->smaller than .net framework
 *nuget.org-->package manager for .net-->built in libraries exist on it,exist in visual stadio.
 =base and other framework needed you can install it from nuget , this allow you to use diffrent versions of frameworks
  on the machine.
 =faster

-.net framework/core--->CLR+BCL(base class libraries-->ÈÊÇÎÏåÇ ÌÇåÒÉ ãä ãÇíßÑæÓæÝÊ-->ex:console,in form of dll).

************************************************************


 
